<?php

namespace Netgusto\Baikal\DavServicesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CalendarEventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CalendarEventRepository extends EntityRepository {

    public function countAll() {
        $qb = $this->createQueryBuilder('CalendarEvent');
        $qb->select('count(CalendarEvent.id)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findByCalendarAndUris(Calendar $calendar, $uris) {

        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT o FROM NetgustoBaikalDavServicesBundle:CalendarEvent o WHERE o.calendar = :calendar AND o.uri IN(:uris)')
            ->setParameter('calendar', $calendar)
            ->setParameter('uris', $uris);

        return $query->getResult();
    }

    public function findByCalendarAndTimeRange(Calendar $calendar, \DateTime $start, \DateTime $end) {

        $pdo = $this->getEntityManager()->getConnection()->getWrappedConnection();
        $pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
        $davcalendar = new \Sabre\CalDAV\Backend\PDO($pdo);

        $uris = $davcalendar->calendarQuery($calendar->getId(), array(
            'name' => 'VCALENDAR',
            'comp-filters' => array(
                array(
                    'name' => 'VEVENT',
                    'comp-filters' => array(),
                    'prop-filters' => array(),
                    'is-not-defined' => false,
                    'time-range' => array(
                        'start' => $start,
                        'end' => $end,
                    ),
                ),
            ),
            'prop-filters' => array(),
            'is-not-defined' => false,
            'time-range' => null,
        ));

        /*foreach($uris as $uri) {
            $res[] = $this->findByCalendarAndUri($calendar, $uri);
        }*/

        return $this->findByCalendarAndUris($calendar, $uris);
    }
}
